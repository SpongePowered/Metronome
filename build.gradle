// Gradle repositories and dependencies
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

// Apply plugin
apply plugin: 'java'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

// Default tasks
defaultTasks 'licenseFormat', 'check', 'build'

// Basic project information
group = 'org.spongepowered'
archivesBaseName = 'metronome'
version = buildVersion + (buildType == 'RELEASE' ? '' : "-$buildType")

// Extended project information
ext.projectName = 'Metronome'
ext.inceptionYear = '2014'
ext.packaging = 'jar'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Minimum version of Java required
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

configurations {
    deployerJars // maven stuff
}

// Project dependencies
dependencies {
    compile 'org.ow2.asm:asm-debug-all:5.2'
    compile 'com.google.guava:guava:17.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'commons-io:commons-io:2.4'
}

// Filter, process, and include resources
processResources {
    // Include in final JAR
   from 'LICENSE.txt'
}

// License header formatting
license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    include '**/*.java'
    header file("HEADER.txt")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

checkstyle {
    configProperties = [
        "name"        : project.name,
        "organization": project.organization,
        "url"         : project.url,
        "year"        : project.inceptionYear
    ]
    configFile = file("checkstyle.xml")
    toolVersion = '6.19'
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'utf8'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    // JAR manifest configuration
    manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
        // for agent
        "Premain-Class": "org.spongepowered.metronome.Agent",
        "Agent-Class": "org.spongepowered.metronome.Agent",
        "Can-Redefine-Classes": true,
        "Can-Retransform-Classes": true
    )
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.resources
    classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = "javadoc"
}

uploadArchives {
    repositories {

        mavenDeployer {
            configuration = configurations.deployerJars

            if (project.hasProperty("chRepo")) {
                repository(url: project.chRepo) {
                    authentication(userName: project.chUsername, password: project.chPassword)
                }
            }

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description project.projectName
                    url 'http://www.spongepowered.org/'

                    scm {
                        url 'https://github.com/SpongePowered/Mixin'
                        connection 'scm:git:git://github.com/SpongePowered/Mixin.git'
                        developerConnection 'scm:git:git@github.com:SpongePowered/Mixin.git'
                    }

                    issueManagement {
                        system 'GitHub Issues'
                        url 'https://github.com/SpongePowered/Mixin/issues'
                    }

                    licenses {
                        license {
                            name 'MIT license'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }
                whenConfigured {
                    dependencies = dependencies.findAll {
                        !it.artifactId.matches(excludePomDeps.join('|'))
                    }
                }
            }
        }
    }
}

install.repositories.mavenInstaller.pom {
    whenConfigured {
        dependencies = dependencies.findAll {
            !it.artifactId.matches(excludePomDeps.join('|'))
        }
    }
}
